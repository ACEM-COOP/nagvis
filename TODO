This is a small file for storing quick thoughts about new features and needed changes:
===============================================================================

Probleme:

- Loop in relativen Koordinaten erkennen und verhindern
  - In WUI Fehler anzeigen
  - Beim Config Parsen Fehlermeldung erzeugen

-------------------------------------------------------------------------------

- Backends:
 - Zusätzlich beliebige Variablen vom Backend holen lassen
   Pro Objekt "Custom Vars" für Context- und Hover-Menus einbauen. Diese werden dann pro Objekt
   u.U. sogar in separaten Queries an das Backend abgefragt und in Hover- und Context-Menus
   als spezielle Macros angeboten.

Installer:
 - Der Installer sollte beim Update headermenu, headertemplate aus [wui] Sektion entfernen.
   Leider ist das nicht ganz so einfach, wie bei den anderen Attributen, da in anderen Sektionen
   diese Optionen noch erlaubt sind.

Redesign Map Aufbau:
  Map Aufbau gliedert sich in 2 Phasen
  1. Was kommt auf die Map? Mögliche Quellen:
    - Map-Konfiguration
    - Funktion liefert Datenkostrukt zurück (wird zu Map-Konfiguration gemerged)
      - Nagios Parents (Automap)
      - Externe DB
    - Es könnte auch ein Include auf irgendeine Datei sein
      - Die Funktion wird nur beim Parsen der Map Konfiguration geladen; Die Daten kommen mit in den Map-Cache
      - Frage hier: Wie wird der Map-Cache ungültig gemacht?
      - Die Funktion kann dann z.B. externe Datenbanken/Livestatus oder so anzapfen um von dort automatisch Objekte zu holen
    - Das Konstrukt kann auch Objekte mit Eigenschaften enthalen, diese könnten dann von der Map Konfiguration überschrieben werden (?)
  2. Welche Eigenschaften haben die Objekte?

Relative Koordinaten:
  - Wie funktionieren Linien zu Linien Referenzen? Geht das überhaupt?

*** Cleanups ***

- ajax_handler und functions/index.php zusammenführen
- CoreUriHandler() nur an einer Stelle initialisieren
- Main Config Zugriff über kürzere Aufrufe. Beispiel: $CORE->cfg('', '');
- Weathermap Linien Perfdata Berechnungen nach check_command aufräumen
- MapCfg Config Array aufräumen


*** Linien (Auch für neue Automap wichtig!) ***
 - Pfeilspitzen konfigurierbar machen
   - Größe
   - Stil
   - Farbe (?)
 - Offset zum Ziel


*** Add/Modify Redesign ***

Aufrufe:
1. Neues Objekt - x/y Koordinaten als Parameter
  - Parameter: type, x, y
2. Objekt klonen - Aktuell konfigurierte Parameter + Objekt-ID generieren
  - Parameter: type, x, y, ...
3. Objekt bearbeiten - Aktuell konfigurierte Parameter
  - object_id

Felder:
  Jedes Feld besteht aus der Instanz einer Klasse. Diese Klasse steuert
  die Darstellung, Validierung usw. dieses Feldes.

  Methoden:
  - default()
    Gibt den Default-Wert dieses Feldes zurück.
  - render()
    HTML-Code zur Eingabe des Wertes. Nicht die ganze Tabellen-Zeile, nur
    die Formular-Felder.
  - validate()
    Funktionen zur validierung eines gültigen Wertes.
  - dependsOn()
    Gibt den Schlüssel einer anderen Option und den Wert zurück, von dem diese
    Option abhängt. Nur wenn der Wert stimmt, wird das Formularfeld angezeigt.

Feld-Eigenschaften:
- Default Werte grau zeigen, solange bis ein anderer Wert gewählt wird
  - Woher kommt der Wert?
- Wenn Wert auf Default zurückgesetzt wird, wieder ausgrauen
- Zwischen Dropdown und Textfeld umschalten können
- Button zum Zurücksetzen eines Wertes auf Default einbauen
- Abhängige Felder je nach Wert eines oder mehrerer Felder zeigen/verstecken

Fehlerbehandlung:
- Direkt im Dialog: Feldbezogene Fehler direkt unter den Feldern anzeigen
- Generelle Fehler als Popup/über Formular anzeigen

- Validierung/Verarbeitung ohne Javascript, kompletter Dialog wird neu generiert
  - Beim Abschicken des Formulars (submitFrontendForm()) den Dialog nicht schließen
    ajax_handler.php?mod=Map&act=addModify&do=modify
    -> zeigt das Formular, muss auch die Daten verarbeiten und dann das Ergebnis malen
  - Das Formular wird abgeschickt und verarbeitet
    -> Im Fehlerfall wird die Antwort in den Dialog gemalt, wobei der vorherige Inhalt überschrieben wird
    -> Bei Erfolg wird der Dialog geschlossen, es wird kurz eine Erfolgsmeldung gezeigt


*** Shortcuts einbauen ***

Gerade der Edit-Modus im normalen Frontend sollte Hotkeys haben. Diese sollten
nach Möglichkeit nicht mit Hotkeys von FF/IE kollidieren.


*** Fehlerbehandlung ***
  Ajax Schnittstelle umbauen: Kleines Protokoll einbauen, mit Header inkl. Fehlercodes etc.
  und man muss nicht bei jeder Anfrage immer die Feld-Namen mitsenden (-> weniger Overhead).

  Bessere Fehlerbehandlung z.B. auf Übersichtsseite, wenn Antwort kein gültiges JS ist.

Exception/Error log bauen:
  PHP Fehler loggen
	Eventuell sogar Javascript fehler loggen


*** Dokumentation ***
  - Neue Editier-Möglichkeiten in der normalen GUI
  - Mittleren Teil der Linien festmachen oder positionieren
  - Relative Koordinaten
  - Relative Koordinaten via Ctrl setzen und via Shift lösen
  - Backend Schnittstelle


===============================================================================
# ERLEDIGT
===============================================================================

Child-Objekte Filtern:
  - Zwei Möglichkeiten
    a) Für tatsächliche Verarbeitung (Status Ermittlung + Child Anzeige)
    b) Nur für Status Ermittlung
  - Neues Attribut einführen, welches die Definition enthält um Childs zu filtern
  - Namen könnte exclude_members sein bzw. exclude_member_states
  - Es können alle Childs gefiltert werden, bei Maps von allen Typen
  - Gematcht wird auf den Namen des Childs bzw. bei Services auf den Service-Namen
  - Als Wert könnten Case Insensitive Reguläre Ausdrücke genutzt werden, z.B. exclude_childs="^Uptime$"
  - Wenn ein Match auf mehrere Elemente nötig ist, z.B. bei Services (Hostname und Service Description),
    dann werden zwei Reguläre Ausdrücke formuliert, welche durch "~~" getrennt werden.
    So können auch in Hostgruppen individuelle Services eines Hosts ausgeklammert werden.
    Beispiel: exclude_childs="^localhost$~~^CPU load$" zum Ausklammern eines bestimmten Dienstes.
  - Notizen:
    - CoreBackendMgmt->queue() fasst gleiche Anfragen zu einer Liste zusammen, um die Anzahl
      der Backend Queries zu reduzieren. z.B. werden Anfragen vom gleichen Typ und mit gleichen
      Optionen (hardstates, ...) zusammengefasst.
      Diese werden zusammen mit den objekttyp spezifischen Filtern an das Backend weitergegeben
      um die richtigen Daten zu holen.
      Als weiteres Kriterium kommen nun die Objekt individuellen Filter dazu. Diese müssen beim
      CoreBackendMgmt->queue() auch dazu führen, dass Objekte mit unterschiedlichen Filtern
      einzeln abgefragt werden.
      Der Grund ist, dass im Backend eine einzige Anfrage mit einem globalen Filter für alle
      angefragten Objekte ausgelöst wird.
  - Verworfen/Zurückgestellt:
    - Man kann mehrere Pattern angeben. Sobald ein Pattern zutrifft, wird übersprungen
    - Mehrere Patterns werden durch ; Zeichen getrennt, z.B. exclude_childs="/^Uptime$/;/^PING$/"
